{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/barfa/barfa.component.css","webpack:///./src/app/barfa/barfa.component.html","webpack:///./src/app/barfa/barfa.component.ts","webpack:///./src/app/server/server.component.css","webpack:///./src/app/server/server.component.html","webpack:///./src/app/server/server.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,wJAAwJ,SAAS,2YAA2Y,MAAM,iJAAiJ,gBAAgB,iBAAiB,qBAAqB,sH;;;;;;;;;;;;;;;;;ACA/sB;AAY1C;IARA;QASG,SAAI,GAAG,SAAS,CAAC;IAEpB,CAAC;IAHY,YAAY;QARxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAKpC,CAAC;OACW,YAAY,CAGxB;IAAD,mBAAC;CAAA;AAHwB;;;;;;;;;;;;;;;;;;;;;;;ACZiC;AACjB;AACE;AACI;AACU;AACG;AAe5D;IAAA;IAAyB,CAAC;IAAb,SAAS;QAbrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,qEAAc;gBACd,wEAAe;aAChB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;aACZ;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACpBtB,+DAA+D,2I;;;;;;;;;;;ACA/D,+SAA+S,YAAY,6KAA6K,YAAY,8NAA8N,gBAAgB,qBAAqB,qBAAqB,0FAA0F,UAAU,4QAA4Q,YAAY,6QAA6Q,gBAAgB,uFAAuF,qBAAqB,qEAAqE,wCAAwC,qBAAqB,iM;;;;;;;;;;;;;;;;;ACAjmD;AAiBlD;IAQE;QAAA,iBAKE;QAZF,mBAAc,GAAG,KAAK,CAAC;QACvB,wBAAmB,GAAC,wBAAwB,CAAC;QAC7C,eAAU,GAAC,OAAO,CAAC;QACnB,cAAS,GAAC,KAAK,CAAC;QAChB,aAAQ,GAAG,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QAIxC,UAAU,CAAC;YACT,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE7B,CAAC,EAAE,IAAI,CAAC,CAAC;IACV,CAAC;IAEF,iCAAQ,GAAR;IAEA,CAAC;IAED,uCAAc,GAAd;QACE,IAAI,CAAC,SAAS,GAAC,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpC,IAAI,CAAC,mBAAmB,GAAC,6BAA6B,GAAE,IAAI,CAAC,UAAU,CAAC;IAE1E,CAAC;IACD,2CAAkB,GAAlB,UAAmB,KAAY;QAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,UAAU,GAAoB,KAAK,CAAC,MAAO,CAAC,KAAK,CAAC;IAEzD,CAAC;IA7BU,cAAc;QAb1B,+DAAS,CAAC;YAET,QAAQ,EAAE,WAAW;YACrB,2BAA2B;YAC3B,yBAAyB;YACzB,aAAa;YACb,4BAA4B;YAC5B,8BAA8B;YAC9B,uCAAuC;YAEvC,mGAAoC;;SAErC,CAAC;;OACW,cAAc,CA+B1B;IAAD,qBAAC;CAAA;AA/B0B;;;;;;;;;;;;ACjB3B,0BAA0B,cAAc,6CAA6C,mR;;;;;;;;;;;ACArF,yDAAyD,UAAU,WAAW,UAAU,OAAO,mBAAmB,0BAA0B,2BAA2B,gBAAgB,+BAA+B,KAAK,UAAU,WAAW,UAAU,OAAO,mBAAmB,c;;;;;;;;;;;;;;;;;ACClO;AAWlD;IAGA;QAFA,aAAQ,GAAS,EAAE,CAAC;QACpB,iBAAY,GAAS,SAAS,CAAC;QAE/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;IAC7D,CAAC;IAED,yCAAe,GAAf;QACA,OAAO,IAAI,CAAC,YAAY,CAAC;IACzB,CAAC;IACD,kCAAQ,GAAR;QACA,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;IACxD,CAAC;IAZY,eAAe;QAL3B,+DAAS,CAAC;YACV,QAAQ,EAAE,YAAY;YACtB,sGAAqC;;SAErC,CAAC;;OACW,eAAe,CAa3B;IAAD,sBAAC;CAAA;AAb2B;;;;;;;;;;;;;ACZ5B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to hiii {{ title }}!\\n  </h1>\\n \\n</div>\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n  <div class=\\\"col-xs-12\\\">\\n      <h3>i am in the AppComponent </h3>\\n      <hr>\\n         <app-server></app-server>  \\n        \\n         <!-- <div app-barfa></div>  -->\\n         <div class=\\\"app-barfa\\\"></div> \\n\\n      \\n      <div><input  type=\\\"text\\\" placeholder=\\\"name\\\" [(ngModel)]=\\\"name\\\"></div>\\n      <p>{{name}}</p>\\n      <!-- <button  class=\\\"btn btn-primary\\\"  (click)=\\\"Oncreateserver()\\\">Add Server</button>\\n      <p [innerText]=\\\"allowNewServer\\\">{{allowNewServer}}</p>\\n      <p>{{serverreationStatus}}</p> -->\\n\\n       <app-barfa></app-barfa>\\n      <app-server></app-server>  \\n\\n  </div>\\n  </div>\\n</div>\\n\\n\\n\\n\\n\"","import { Component } from '@angular/core';\n\nimport { template } from '@angular/core/src/render3';\nimport { templateJitUrl } from '@angular/compiler';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n\n  styles:\n\n  [`h3{color: dodgerblue; background-color:palegreen; padding:20px; border:1px solid red;}`]\n})\nexport class AppComponent {\n   name = 'surekha';\n \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { BarfaComponent } from './barfa/barfa.component';\nimport { ServerComponent } from './server/server.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BarfaComponent,\n    ServerComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JhcmZhL2JhcmZhLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<!-- <p>\\n  barfa works!\\n</p>\\n<hr>\\n<app-server class=\\\"c1\\\"></app-server> \\n<app-server class=\\\"c1\\\"></app-server>  -->\\n<div class=\\\"col-md-6\\\">\\n    <label>Server Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" (input)=\\\"onupdateservername($event)\\\">\\n    <!-- <p>{{servername}}</p> -->\\n</div>\\n<br>\\n<div class=\\\"col-md-6\\\">\\n    <label>Server Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"servername\\\">\\n    <!-- <p>{{servername}}</p> -->\\n</div>\\n<br>\\n\\n\\n<div class=\\\"col-md-6\\\">\\n    <button  class=\\\"btn btn-primary\\\" [disabled]=\\\"!allowNewServer\\\" (click)=\\\"Oncreateserver()\\\">Add Server</button>\\n\\n    \\n    <p [innerText]=\\\"allowNewServer\\\">{{allowNewServer}}</p>\\n          <p>{{serverreationStatus}}</p>\\n</div>\\n<input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"username\\\">\\n<p>{{username}}</p>\\n<button class=\\\"btn btn-primary\\\" [disabled]=\\\"username===''\\\" (click)=\\\"username=''\\\" >reset user</button>\\n\\n\\n<div class=\\\"col-md-6\\\">\\n    <label>Server Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"servername\\\">\\n    <!-- <p>{{servername}}</p> -->\\n</div>\\n<br>\\n<input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"servername\\\">\\n\\n\\n    <button  class=\\\"btn btn-primary\\\" [disabled]=\\\"!allowNewServer\\\" (click)=\\\"Oncreateserver()\\\">Add Server</button>\\n\\n    \\n    <p [innerText]=\\\"allowNewServer\\\">{{allowNewServer}}</p>\\n          <p *ngIf=\\\"sercreate\\\">Server was Created , Server was created namr! {{serverreationStatus}}</p>\\n          <h3>ng tamplate</h3>\\n          <p *ngIf=\\\"sercreate; else noserver\\\">Server was Created , {{serverreationStatus}}</p>\\n          <ng-template #noserver>\\n            <p>no server was created!</p>\\n          </ng-template><br>\\n           <app-server *ngFor =\\\"let server1 of servers\\\"></app-server> \\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { template } from '@angular/core/src/render3';\nimport { templateJitUrl } from '@angular/compiler';\n\n@Component({\n  \n  selector: 'app-barfa',\n  // selector: '[app-barfa]',\n  //selector: '.app-barfa',\n  // template:`\n  // <app-server></app-server>\n  // <app-server></app-server>`,\n  // styleUrls: ['./barfa.component.css']\n\n  templateUrl:'./barfa.component.html',\n  styleUrls: ['./barfa.component.css']\n})\nexport class BarfaComponent implements OnInit {\n  allowNewServer = false;\n  serverreationStatus='No Server Was Created!';\n  servername='test1';\n  sercreate=false;\n  servers1 = ['testserver1' ,'testserver2'];\n\n\n  constructor() {\n    setTimeout(() => {\n      this.allowNewServer = true;\n      \n    }, 2000);\n   }\n\n  ngOnInit() {\n\n  }\n\n  Oncreateserver(){\n    this.sercreate=true;\n    this.servers1.push(this.servername);\n    this.serverreationStatus='server was Created!name is '+ this.servername;\n\n  }\n  onupdateservername(event: Event){\n    console.log(event);\n    this.servername=(<HTMLInputElement>event.target).value;\n\n  }\n\n}\n","module.exports = \".onile:{color: white;}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2VydmVyL3NlcnZlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQVEsWUFBWSxDQUFDIiwiZmlsZSI6InNyYy9hcHAvc2VydmVyL3NlcnZlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm9uaWxlOntjb2xvcjogd2hpdGU7fSJdfQ== */\"","module.exports = \"<h1>this server component</h1>\\r\\n<p>{{'server'}} with id {{serverid}} and {{getserverStatus()}} </p>\\r\\n<p  [ngStyle]=\\\"{backgroundColor:getcolor()}\\\" [ngClass]=\\\"{online:serverStatus==='online'}\\\">{{'server'}} with id {{serverid}} and {{getserverStatus()}} </p>\\r\\n\\r\\n\"","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { template } from '@angular/core/src/render3';\r\nimport { templateJitUrl } from '@angular/compiler';\r\n\r\nimport { from } from 'rxjs';\r\n\r\n@Component({\r\n\tselector: 'app-server',\r\n\ttemplateUrl:'./server.component.html',\r\n\tstyleUrls: ['./server.component.css']\r\n})\r\nexport class ServerComponent{\r\nserverid: number=10;\r\nserverStatus: String='offline';\r\nconstructor(){\r\nthis.serverStatus = Math.random()>0.5 ? 'online' : 'offline';\r\n}\r\n\r\ngetserverStatus() {\r\nreturn this.serverStatus;\r\n}\r\ngetcolor(){\r\nreturn this.serverStatus === 'online' ? 'green' : 'red';\r\n}\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}